## Oliver Snellman 28.2.2020 (Updated 9.1.2024)

# This simulator enables comparison of different time series processes, i.e. how identical
# shocks propagate through AR(1), MA(1), ARMA(1,1), GARCH(1,1) and ARMA-GARCH(1,1,1,1) models,
# with user specified parameter values. An introduction to the models can be found at:
# github.com/OliverSnellman/Cool-econometrics/blob/master/Time_series_models.pdf.

# If option IRF is specified as TRUE, then there is one unit sized shock every 50 periods.
# Otherwise the shocks are drawn randomly at each period from either normal, uniform or t-distribution (with df=10).

simulator <- function(n, models, errors, speed, irf){
  
  # Set up
  par(mfrow=c(1,1))
  refresh <- ifelse(speed=="fast", 0.05, 0.2)
  
  n_series <- length(models)
  y <- list()
  h <- c(0) # For GARCH
  u <- c(0)
  model_names <- list()
  params <- list()
  for(i in 1:n_series){
    y[[i]] <- c(0)
    model_names[[i]] <- models[[i]][[1]]
    params[[i]] <- models[[i]][[2]]
  }
  
  # Vector of shocks
  if(irf){
    epsilon <- c(rep(c(0,0,0,0,1,rep(0, 45)), (ceiling(n/50))))
  } else {
    if(errors == "fat"){
      epsilon <- rt(n, df=10)
    } else if (errors == "uniform") {
      epsilon <- runif(n,0,1)
    } else {
      epsilon <- rnorm(n,0,1)
    }
  }
  
  
  # Simulate the series
  for(j in 1:n_series){
    for(i in 2:n){
      if(model_names[[j]]=="arma-garch"){
        h[[i]] <- 1 + params[[j]][[3]]*h[[i-1]] + params[[j]][[4]]*u[[i-1]]^2
        u[[i]] <- sqrt(h[[i]])*epsilon[[i]]
        y[[j]][[i]] <- params[[j]][[1]]*y[[j]][[i-1]] + params[[j]][[2]]*epsilon[[i-1]] + u[[i]]
      } else if(model_names[[j]]=="garch"){
        h[[i]] <- 1 + params[[j]][[1]]*h[[i-1]] + params[[j]][[2]]*y[[j]][[i-1]]^2
        y[[j]][[i]] <- sqrt(h[[i]])*epsilon[[i]]
      } else if(model_names[[j]] =="arma"){
        y[[j]][[i]] <- params[[j]][[1]]*y[[j]][[i-1]] + params[[j]][[2]]*epsilon[[i-1]] + epsilon[[i]]
      } else if (model_names[[j]] =="ar") {
        y[[j]][[i]] <- params[[j]][[1]]*y[[j]][[i-1]] + epsilon[[i]]
      } else if (model_names[[j]] =="ma") {
        y[[j]][[i]] <- params[[j]][[1]]*epsilon[[i-1]] + epsilon[[i]]
      }
    }
  }
  
  # For visualization
  stack <- do.call(cbind, y)
  limits <- t(apply(stack, 1, range))
  
  # Plot the results
  cols_ <- c("red", "violet", "forestgreen", "purple")
  if(irf){
    for(i in 1:n){
      if(i>50){
        lims <- c(min(limits[(i-50):i,1]), max(limits[(i-50):i,2]))
        ts.plot(ts(y[[1]][(i-50):i]), line=0, col=c("blue", "black"), ylim=lims, lty=c(1))
        for(j in 2:n_series) lines(ts(y[[j]][(i-50):i]), col=cols_[[j-1]])
        title("Comparing time series processes")
        legend("bottomleft", legend=model_names,
               col=c("blue", "red"), lty=c(1), cex=1.2, bty="n", box.lty=1)
      } else {
        lims <- c(min(limits[1:i,1]), max(limits[1:i,2]))
        ts.plot(ts(y[[1]][1:i]), line=0, col=c("blue", "black"), ylim=lims, lty=c(1))
        for(j in 2:n_series) lines(ts(y[[j]][1:i]), col=cols_[[j-1]])
        title("Comparing time series processes")
        legend("bottomleft", legend=model_names,
               col=c("blue", "red"), lty=c(1), cex=1.2, bty="n", box.lty=1)
        }
      
      Sys.sleep(refresh)
    }
  } else {
    for(i in 1:n){
      if(i>100){
        lims <- c(min(limits[(i-100):i,1]), max(limits[(i-100):i,2]))
        ts.plot(ts(y[[1]][(i-100):i]), line=0, col=c("blue", "black"), ylim=lims, lty=c(1))
        for(j in 2:n_series) lines(ts(y[[j]][(i-100):i]), col=cols_[[j-1]])
        title("Comparing time series processes")
        legend("bottomleft", legend=model_names,
               col=c("blue", cols_), lty=c(1), cex=1.2, bty="n", box.lty=1)
      } else {
        lims <- c(min(limits[1:i,1]), max(limits[1:i,2]))
        ts.plot(ts(y[[1]][1:i]), line=0, col=c("blue", "black"), ylim=lims, lty=c(1))
        for(j in 2:n_series) lines(ts(y[[j]][1:i]), col=cols_[[j-1]])
        title("Comparing time series processes")
        legend("bottomleft", legend=model_names,
               col=c("blue", cols_), lty=c(1), cex=1.2, bty="n", box.lty=1)
      }
      
      Sys.sleep(refresh)
    }
  }
}


# Create a list of models to be compared. Each model is to be specified on a separate entry to the list.
# First element is the name of the process in "quotation" marks: "ar", "ma", "arma", "garch" or "arma-garch".
# Second element is a vector with one or more parameters (depending on the model), first alpha or phi, then beta or theta.

model_list <- list()
model_list[[1]] <- list("arma", c(0.5, 0.5))
model_list[[2]] <- list("garch", c(0.5, 0.5))

# model_list[[1]] <- list("ar", c(0.9))
# model_list[[2]] <- list("ma", c(0.9))
#
# model_list[[1]] <- list("ar", c(0.4))
# model_list[[2]] <- list("arma", c(0.4, 0.4))
# 
# model_list[[1]] <- list("ar", c(0.6))
# model_list[[2]] <- list("ma", c(0.6))
# model_list[[3]] <- list("arma", c(0.5, 0.5))
# model_list[[4]] <- list("garch", c(0.5, 0.5))
# model_list[[5]] <- list("arma-garch", c(0.4, 0.4, 0.4, 0.4))


dev.new()
simulator(n=10000,                   # How many periods to simulate
          models=model_list,         # Pre-specified list of models to compare
          errors="fat",              # Distribution of the error term: "normal", "fat" or "uniform"
          speed="fast",              # Speed of simulation: "fast" or "slow"
          irf=FALSE)                     # Impulse Responses: TRUE or FALSE

dev.off()

